{
  "version": 3,
  "sources": ["../../../app/routes/join.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/join.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/join.jsx\");\n  import.meta.hot.lastModified = \"1692627902050.2231\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport { useEffect, useRef } from \"react\";\nimport { createUser, getUserByEmail } from \"~/models/user.server\";\nimport { createUserSession, getUserId } from \"~/session.server\";\nimport { safeRedirect, validateEmail } from \"~/utils\";\nexport const loader = async ({\n  request\n}) => {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n  return json({});\n};\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/\");\n  if (!validateEmail(email)) {\n    return json({\n      errors: {\n        email: \"Email is invalid\",\n        password: null\n      }\n    }, {\n      status: 400\n    });\n  }\n  if (typeof password !== \"string\" || password.length === 0) {\n    return json({\n      errors: {\n        email: null,\n        password: \"Password is required\"\n      }\n    }, {\n      status: 400\n    });\n  }\n  if (password.length < 8) {\n    return json({\n      errors: {\n        email: null,\n        password: \"Password is too short\"\n      }\n    }, {\n      status: 400\n    });\n  }\n  const existingUser = await getUserByEmail(email);\n  if (existingUser) {\n    return json({\n      errors: {\n        email: \"A user already exists with this email\",\n        password: null\n      }\n    }, {\n      status: 400\n    });\n  }\n  const user = await createUser(email, password);\n  return createUserSession({\n    redirectTo,\n    remember: false,\n    request,\n    userId: user.id\n  });\n};\nexport const meta = () => [{\n  title: \"Sign Up\"\n}];\nexport default function Join() {\n  _s();\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") ?? undefined;\n  const actionData = useActionData();\n  const emailRef = useRef(null);\n  const passwordRef = useRef(null);\n  useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef.current?.focus();\n    } else if (actionData?.errors?.password) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n  return <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <Form method=\"post\" className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n              Email address\n            </label>\n            <div className=\"mt-1\">\n              <input ref={emailRef} id=\"email\" required autoFocus={true} name=\"email\" type=\"email\" autoComplete=\"email\" aria-invalid={actionData?.errors?.email ? true : undefined} aria-describedby=\"email-error\" className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\" />\n\n              {actionData?.errors?.email ? <div className=\"pt-1 text-red-700\" id=\"email-error\">\n                  {actionData.errors.email}\n                </div> : null}\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n              Password\n            </label>\n            <div className=\"mt-1\">\n              <input id=\"password\" ref={passwordRef} name=\"password\" type=\"password\" autoComplete=\"new-password\" aria-invalid={actionData?.errors?.password ? true : undefined} aria-describedby=\"password-error\" className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\" />\n\n              {actionData?.errors?.password ? <div className=\"pt-1 text-red-700\" id=\"password-error\">\n                  {actionData.errors.password}\n                </div> : null}\n            </div>\n          </div>\n\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          <button type=\"submit\" className=\"w-full rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\">\n            Create Account\n          </button>\n          <div className=\"flex items-center justify-center\">\n            <div className=\"text-center text-sm text-gray-500\">\n              Already have an account?{\" \"}\n              <Link className=\"text-blue-500 underline\" to={{\n              pathname: \"/login\",\n              search: searchParams.toString()\n            }}>\n                Log in\n              </Link>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>;\n}\n_s(Join, \"RidIhLwFrqAsyRbtfUp5EYY5fes=\", false, function () {\n  return [useSearchParams, useActionData];\n});\n_c = Join;\nvar _c;\n$RefreshReg$(_c, \"Join\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "_c", "_a", "_b", "_d"]
}

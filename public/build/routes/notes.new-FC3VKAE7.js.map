{
  "version": 3,
  "sources": ["../../../app/routes/notes.new.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/notes.new.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/notes.new.jsx\");\n  import.meta.hot.lastModified = \"1692627902086.0237\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData } from \"@remix-run/react\";\nimport { useEffect, useRef } from \"react\";\nimport { createNote } from \"~/models/note.server\";\nimport { requireUserId } from \"~/session.server\";\nexport const action = async ({\n  request\n}) => {\n  const userId = await requireUserId(request);\n  const formData = await request.formData();\n  const title = formData.get(\"title\");\n  const body = formData.get(\"body\");\n  if (typeof title !== \"string\" || title.length === 0) {\n    return json({\n      errors: {\n        body: null,\n        title: \"Title is required\"\n      }\n    }, {\n      status: 400\n    });\n  }\n  if (typeof body !== \"string\" || body.length === 0) {\n    return json({\n      errors: {\n        body: \"Body is required\",\n        title: null\n      }\n    }, {\n      status: 400\n    });\n  }\n  const note = await createNote({\n    body,\n    title,\n    userId\n  });\n  return redirect(`/notes/${note.id}`);\n};\nexport default function NewNotePage() {\n  _s();\n  const actionData = useActionData();\n  const titleRef = useRef(null);\n  const bodyRef = useRef(null);\n  useEffect(() => {\n    if (actionData?.errors?.title) {\n      titleRef.current?.focus();\n    } else if (actionData?.errors?.body) {\n      bodyRef.current?.focus();\n    }\n  }, [actionData]);\n  return <Form method=\"post\" style={{\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: 8,\n    width: \"100%\"\n  }}>\n      <div>\n        <label className=\"flex w-full flex-col gap-1\">\n          <span>Title: </span>\n          <input ref={titleRef} name=\"title\" className=\"flex-1 rounded-md border-2 border-blue-500 px-3 text-lg leading-loose\" aria-invalid={actionData?.errors?.title ? true : undefined} aria-errormessage={actionData?.errors?.title ? \"title-error\" : undefined} />\n        </label>\n        {actionData?.errors?.title ? <div className=\"pt-1 text-red-700\" id=\"title-error\">\n            {actionData.errors.title}\n          </div> : null}\n      </div>\n\n      <div>\n        <label className=\"flex w-full flex-col gap-1\">\n          <span>Body: </span>\n          <textarea ref={bodyRef} name=\"body\" rows={8} className=\"w-full flex-1 rounded-md border-2 border-blue-500 px-3 py-2 text-lg leading-6\" aria-invalid={actionData?.errors?.body ? true : undefined} aria-errormessage={actionData?.errors?.body ? \"body-error\" : undefined} />\n        </label>\n        {actionData?.errors?.body ? <div className=\"pt-1 text-red-700\" id=\"body-error\">\n            {actionData.errors.body}\n          </div> : null}\n      </div>\n\n      <div className=\"text-right\">\n        <button type=\"submit\" className=\"rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\">\n          Save\n        </button>\n      </div>\n    </Form>;\n}\n_s(NewNotePage, \"FqTS+MoncyjDl4GQ+6WtDeU0reg=\", false, function () {\n  return [useActionData];\n});\n_c = NewNotePage;\nvar _c;\n$RefreshReg$(_c, \"NewNotePage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "_c", "_a", "_b", "_d"]
}
